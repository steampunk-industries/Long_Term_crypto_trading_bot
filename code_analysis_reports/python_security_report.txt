

+===========================================================================================================================================================================================+


DEPRECATED: this command (`check`) has been DEPRECATED, and will be unsupported beyond 01 June 2024.


We highly encourage switching to the new `scan` command which is easier to use, more powerful, and can be set up to mimic the deprecated command if required.


+===========================================================================================================================================================================================+


+==============================================================================+

                                   /$$$$$$            /$$
                                  /$$__  $$          | $$
               /$$$$$$$  /$$$$$$ | $$  \__//$$$$$$  /$$$$$$   /$$   /$$
              /$$_____/ |____  $$| $$$$   /$$__  $$|_  $$_/  | $$  | $$
             |  $$$$$$   /$$$$$$$| $$_/  | $$$$$$$$  | $$    | $$  | $$
              \____  $$ /$$__  $$| $$    | $$_____/  | $$ /$$| $$  | $$
              /$$$$$$$/|  $$$$$$$| $$    |  $$$$$$$  |  $$$$/|  $$$$$$$
             |_______/  \_______/|__/     \_______/   \___/   \____  $$
                                                              /$$  | $$
                                                             |  $$$$$$/
      by safetycli.com                                        \______/

+==============================================================================+

 ANNOUNCEMENTS

  * Warning: ccxt, python-binance, coinbase, kucoin-python, pandas, numpy, ta, 
    scikit-learn, tensorflow, keras, tweepy, praw, newsapi-python, textblob, 
    nltk, sqlalchemy, psycopg2-binary, alembic, flask, flask-login, flask-wtf, 
    dash, plotly, boto3, python-dotenv, schedule, loguru and tqdm are unpinned. 
    Safety by default does not report on potential vulnerabilities in unpinned 
    packages. It is recommended to pin your dependencies unless this is a 
    library meant for distribution. To learn more about reporting these, 
    specifier range handling, and options for scanning unpinned packages visit 
    https://docs.pyup.io/docs/safety-range-specs 

+==============================================================================+

 REPORT 

  Safety v3.4.0 is scanning for Vulnerabilities...
  Scanning dependencies in your files:

  -> requirements.txt

  Using open-source vulnerability database
  Found and scanned 28 packages
  Timestamp 2025-04-27 01:44:01
  0 vulnerabilities reported
  164 vulnerabilities ignored

+==============================================================================+
 VULNERABILITIES FOUND
+==============================================================================+

-> Warning: 1 known vulnerability matches the tqdm versions that could be 
   installed from your specifier: tqdm>=4.64.0 (unpinned). These 
   vulnerabilities are not reported by default. To report these vulnerabilities 
   set 'ignore-unpinned-requirements' to False under 'security' in your policy 
   file. See https://docs.pyup.io/docs/safety-20-policy-file for more 
   information. 
   It is recommended to pin your dependencies unless this is a library meant 
   for distribution. To learn more about reporting these, specifier range 
   handling, and options for scanning unpinned packages visit 
   https://docs.pyup.io/docs/safety-range-specs 
-> Warning: 2 known vulnerabilities match the dash versions that could be 
   installed from your specifier: dash>=2.5.1 (unpinned). These vulnerabilities 
   are not reported by default. To report these vulnerabilities set 'ignore- 
   unpinned-requirements' to False under 'security' in your policy file. See 
   https://docs.pyup.io/docs/safety-20-policy-file for more information. 
   It is recommended to pin your dependencies unless this is a library meant 
   for distribution. To learn more about reporting these, specifier range 
   handling, and options for scanning unpinned packages visit 
   https://docs.pyup.io/docs/safety-range-specs 
-> Warning: 1 known vulnerability matches the flask versions that could be 
   installed from your specifier: flask>=2.1.2 (unpinned). These 
   vulnerabilities are not reported by default. To report these vulnerabilities 
   set 'ignore-unpinned-requirements' to False under 'security' in your policy 
   file. See https://docs.pyup.io/docs/safety-20-policy-file for more 
   information. 
   It is recommended to pin your dependencies unless this is a library meant 
   for distribution. To learn more about reporting these, specifier range 
   handling, and options for scanning unpinned packages visit 
   https://docs.pyup.io/docs/safety-range-specs 
-> Warning: 1 known vulnerability matches the sqlalchemy versions that could be 
   installed from your specifier: sqlalchemy>=1.4.39 (unpinned). These 
   vulnerabilities are not reported by default. To report these vulnerabilities 
   set 'ignore-unpinned-requirements' to False under 'security' in your policy 
   file. See https://docs.pyup.io/docs/safety-20-policy-file for more 
   information. 
   It is recommended to pin your dependencies unless this is a library meant 
   for distribution. To learn more about reporting these, specifier range 
   handling, and options for scanning unpinned packages visit 
   https://docs.pyup.io/docs/safety-range-specs 
-> Warning: 3 known vulnerabilities match the nltk versions that could be 
   installed from your specifier: nltk>=3.7 (unpinned). These vulnerabilities 
   are not reported by default. To report these vulnerabilities set 'ignore- 
   unpinned-requirements' to False under 'security' in your policy file. See 
   https://docs.pyup.io/docs/safety-20-policy-file for more information. 
   It is recommended to pin your dependencies unless this is a library meant 
   for distribution. To learn more about reporting these, specifier range 
   handling, and options for scanning unpinned packages visit 
   https://docs.pyup.io/docs/safety-range-specs 
-> Warning: 2 known vulnerabilities match the keras versions that could be 
   installed from your specifier: keras>=2.8.0 (unpinned). These 
   vulnerabilities are not reported by default. To report these vulnerabilities 
   set 'ignore-unpinned-requirements' to False under 'security' in your policy 
   file. See https://docs.pyup.io/docs/safety-20-policy-file for more 
   information. 
   It is recommended to pin your dependencies unless this is a library meant 
   for distribution. To learn more about reporting these, specifier range 
   handling, and options for scanning unpinned packages visit 
   https://docs.pyup.io/docs/safety-range-specs 
-> Warning: 149 known vulnerabilities match the tensorflow versions that could 
   be installed from your specifier: tensorflow>=2.8.0 (unpinned). These 
   vulnerabilities are not reported by default. To report these vulnerabilities 
   set 'ignore-unpinned-requirements' to False under 'security' in your policy 
   file. See https://docs.pyup.io/docs/safety-20-policy-file for more 
   information. 
   It is recommended to pin your dependencies unless this is a library meant 
   for distribution. To learn more about reporting these, specifier range 
   handling, and options for scanning unpinned packages visit 
   https://docs.pyup.io/docs/safety-range-specs 
-> Warning: 2 known vulnerabilities match the scikit-learn versions that could 
   be installed from your specifier: scikit-learn>=1.0.2 (unpinned). These 
   vulnerabilities are not reported by default. To report these vulnerabilities 
   set 'ignore-unpinned-requirements' to False under 'security' in your policy 
   file. See https://docs.pyup.io/docs/safety-20-policy-file for more 
   information. 
   It is recommended to pin your dependencies unless this is a library meant 
   for distribution. To learn more about reporting these, specifier range 
   handling, and options for scanning unpinned packages visit 
   https://docs.pyup.io/docs/safety-range-specs 
-> Warning: 3 known vulnerabilities match the numpy versions that could be 
   installed from your specifier: numpy>=1.21.6 (unpinned). These 
   vulnerabilities are not reported by default. To report these vulnerabilities 
   set 'ignore-unpinned-requirements' to False under 'security' in your policy 
   file. See https://docs.pyup.io/docs/safety-20-policy-file for more 
   information. 
   It is recommended to pin your dependencies unless this is a library meant 
   for distribution. To learn more about reporting these, specifier range 
   handling, and options for scanning unpinned packages visit 
   https://docs.pyup.io/docs/safety-range-specs 


+==============================================================================+

 Scan was completed. 0 vulnerabilities were reported. 164 vulnerabilities from 
 9 packages were ignored. 

+==============================================================================+


+===========================================================================================================================================================================================+


DEPRECATED: this command (`check`) has been DEPRECATED, and will be unsupported beyond 01 June 2024.


We highly encourage switching to the new `scan` command which is easier to use, more powerful, and can be set up to mimic the deprecated command if required.


+===========================================================================================================================================================================================+


